#ifndef __MESH_HANDLER_H__
#define __MESH_HANDLER_H__

#include "m2Includes.h"
#include "al_Mesh.hpp"
namespace m2{
enum Primitive {
  POINTS	 = GL_POINTS,
  LINES		 = GL_LINES,
  LINE_STRIP     = GL_LINE_STRIP,
  LINE_LOOP      = GL_LINE_LOOP,
  TRIANGLES      = GL_TRIANGLES,
  TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
  TRIANGLE_FAN	 = GL_TRIANGLE_FAN,
  QUADS		 = GL_QUADS,
  QUAD_STRIP	 = GL_QUAD_STRIP,
  POLYGON	 = GL_POLYGON
};

inline void draw(const al::Mesh& v) {
  const int Nv = v.vertices().size();
  if(0 == Nv) return;
	
  const int Nc = v.colors().size();
  const int Nci= v.coloris().size();
  const int Nn = v.normals().size();
  const int Nt2= v.texCoord2s().size();
  const int Nt3= v.texCoord3s().size();
  const int Ni = v.indices().size();
	
  //printf("Nv %i Nc %i Nn %i Nt2 %i Nt3 %i Ni %i\n", Nv, Nc, Nn, Nt2, Nt3, Ni);

  // Enable arrays and set pointers...
  glEnableClientState(GL_VERTEX_ARRAY);
  glVertexPointer(3, GL_FLOAT, 0, &v.vertices()[0]);

  if(Nn >= Nv){
    glEnableClientState(GL_NORMAL_ARRAY);
    glNormalPointer(GL_FLOAT, 0, &v.normals()[0]);
  }
	
  if(Nc >= Nv){
    glEnableClientState(GL_COLOR_ARRAY);
    glColorPointer(4, GL_FLOAT, 0, &v.colors()[0]);
  }
  else if(Nci >= Nv){
    glEnableClientState(GL_COLOR_ARRAY);
    glColorPointer(4, GL_UNSIGNED_BYTE, 0, &v.coloris()[0]);
    //		printf("using integer colors\n");	
  }
  else if(0 == Nc && 0 == Nci){
    // just use whatever the last glColor() call used!
  }
  else{
    if(Nc)
      //glColor4f(v.colors()[0][0], v.colors()[0][1], v.colors()[0][2], v.colors()[0][3]);
      glColor4fv(v.colors()[0].components);
    else
      glColor3ubv(v.coloris()[0].components);
  }
	
  if(Nt2 || Nt3){
    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
    if(Nt2 >= Nv) glTexCoordPointer(2, GL_FLOAT, 0, &v.texCoord2s()[0]);
    if(Nt3 >= Nv) glTexCoordPointer(3, GL_FLOAT, 0, &v.texCoord3s()[0]);
  }
	
	
  if(Ni){
    //unsigned vs=0, ve=Nv;	// range of vertex indices to prefetch
    // NOTE:	if this range exceeds the number of vertices,
    //			expect a segmentation fault...
    unsigned is=0, ie=Ni;	// range of indices to draw

    //		glDrawRangeElements(v.primitive(), vs, ve, ie-is, GL_UNSIGNED_INT, &v.indices()[is]);
    glDrawElements(
		   ((Primitive)v.primitive()), 
		   ie-is, 
		   GL_UNSIGNED_INT, 
		   &v.indices()[is]
		   );
  }
  else{
    glDrawArrays(
		 ((Primitive)v.primitive()), 
		 0, 
		 v.vertices().size()
		 );
  }

  glDisableClientState(GL_VERTEX_ARRAY);
  if(Nn)			glDisableClientState(GL_NORMAL_ARRAY);
  if(Nc || Nci)	glDisableClientState(GL_COLOR_ARRAY);
  if(Nt2 || Nt3)	glDisableClientState(GL_TEXTURE_COORD_ARRAY);
}

template<typename SPACE>
inline void fill_mesh(m2::face<SPACE> * f,
		      al::Mesh& m){
  M2_TYPEDEFS;
    
  f->update_normal();	
  face_vertex_ptr itb = f->fbegin();
  face_vertex_ptr c0 = f->fbegin();
  face_vertex_ptr c1 = c0->next();
  face_vertex_ptr c2 = c1->next();
  face_vertex_ptr ite = f->fend();
			
  //coordinate_type& vect0 = c0->coordinate();
  //m.vertex(vect0);
  bool at_head = false;
  
  while (!at_head) {
    at_head = c2==ite;
    coordinate_type vect0 = c0->coordinate();				
    coordinate_type vect1 = c1->coordinate();
    coordinate_type vect2 = c2->coordinate();
    int i0 = c0->vertex()->position_in_set();
    int i1 = c1->vertex()->position_in_set();
    int i2 = c2->vertex()->position_in_set();
    //m2::colorRGB cl0 = c0->face()->color;
    // m2::colorRGB cl1 = c1->face()->color;
    //m2::colorRGB cl2 = c2->face()->color;

    m2::colorRGB cl0 = c0->vertex()->color;
    m2::colorRGB cl1 = c1->vertex()->color;
    m2::colorRGB cl2 = c2->vertex()->color;

    
    bool vNULL = &vect0 != NULL;
    if (vNULL) {			
      m.index(i0);
      m.index(i1);
      m.index(i2);
      /*
      m.color(cl0.r,cl0.g,cl0.b,cl0.a );
      m.vertex(vect1[0],vect1[1],vect1[2]);
      m.color(cl1.r,cl1.g,cl1.b,cl1.a);
      m.vertex(vect2[0],vect2[1],vect2[2]);
      m.color(cl2.r,cl2.g,cl2.b,cl2.a);
      */
      }
    //c0 = c0->next()->next();
    c1 = c1->next();
    c2 = c2->next();
    //itb = itb->next();
  }
}

template<typename SPACE>
inline void fill_mesh(m2::control<SPACE>* obj,
		      al::Mesh& m){ 
  M2_TYPEDEFS;
  m.reset();
  m.primitive(al::Graphics::TRIANGLES);
  fa_iterator it_b = obj->get_faces().begin();
  fa_iterator it_e = obj->get_faces().end();
  vector<vertex_ptr> verts = obj->get_vertices();
  for(int i = 0; i < verts.size();i++){
    coordinate_type ci = verts[i]->coordinate();
    m2::colorRGB co = verts[i]->color;
    m.vertex(ci[0],ci[1],ci[2]);
    m.color(co.r,co.g,co.b,co.a );
  }

  while (it_b != it_e) {
    if(*it_b){
      fill_mesh(*it_b,m);
      //(*it_b)->draw_normal(off);
    }				
    it_b++;
  }
 m.generateNormals();			
}
}
#endif
