/*
 *  vec_addendum.h
 *  Manifold
 *
 *  Created by John Delaney on 3/23/11.
 *  Copyright 2011 __MyCompanyName__. All rights reserved.
 *
 */
#include <math.h>
#include <vector>
#include <iostream>

#include <Eigen/Dense>
#include <Eigen/Eigenvalues>


#ifndef __VECADD__
#define __VECADD__

using namespace std;


template <class Tf, class Tv>
  inline Tv linear(Tf f, const Tv& x, const Tv& y){
  return (y - x) * f + x;
}

template<typename T>
inline T dist(const Eigen::Matrix<T,3,1>& A,
	      const Eigen::Matrix<T,3,1>& B){
  return sqrt((A[0]-B[0])*(A[0]-B[0]) + (A[1]-B[1])*(A[1]-B[1]) + (A[2]-B[2])*(A[2]-B[2]));
}

template<int N, typename T>
  inline T dist(const Eigen::Matrix<T,N,1>& A,
		const Eigen::Matrix<T,N,1>& B){
  T d = 0;
  for (int i = 0; i < N; i++) {
    d += (A[i]-B[i])*(A[i]-B[i]);
  }
  d = sqrt(d);
  return d;
}

template <int N,typename T>
  inline T dot(const Eigen::Matrix<T,N,1>& angA, const Eigen::Matrix<T,N,1>& angB){
  T AB = 0;
  for (int i = 0; i < N; i++) {
    AB += angA[i]*angB[i];
  }
  return AB;
}

template <int N, typename T>
  struct  vecComp{
    bool operator()(const T& x, const T& y){return ((*x)[N] < (*y)[N]);}
  };

//template <typename T>
//inline Eigen::Matrix<T,3,1> cross(const Eigen::Matrix<T,3,1>& vecA, const  Eigen::Matrix<T,3,1> vecB){
//	Eigen::Matrix<T,3,1> out;
//	out[0] = vecA[1]*vecB[2] - vecA[2]*vecB[1];
//	out[1] = vecA[2]*vecB[0] - vecA[0]*vecB[2];
//	out[2] = vecA[0]*vecB[1] - vecA[1]*vecB[0];
//	return out;
//}

template <typename T>
inline Eigen::Matrix<T,3,1> ray_point_intersect(const Eigen::Matrix<T,3,1>& l0,
					const Eigen::Matrix<T,3,1>& l1,
					const Eigen::Matrix<T,3,1>& p0,
					T& dist){
  //calculate the intersection of a ray through to a perpendicular plane passing through a point
  //This is for detecting if a point lies in a box or not.
  Eigen::Matrix<T,3,1> l = (l1-l0);
  l.normalize();
  T den = dot(l, l);
  Eigen::Matrix<T,3,1> vect = p0-l0;
  T d = dot(vect,l)/den;
  Eigen::Matrix<T,3,1> p_out = l0 + l*d;
  dist = d;
  return p_out;
}

//functions-------------------------------
template <typename T>
inline Eigen::Matrix<T,3,1> line_plane_intersect(const Eigen::Matrix<T,3,1>& r0,
					 const Eigen::Matrix<T,3,1>& r1,
					 const Eigen::Matrix<T,3,1>& v0,
					 const Eigen::Matrix<T,3,1>& v1,
					 const Eigen::Matrix<T,3,1>& v2 ){
  //calculate the intersection between a line and a plane
  Eigen::Matrix<T,3,1> N = cross((v1-v0), (v2-v0));
  Eigen::Matrix<T,3,1> n = N.normalize();
	
  Eigen::Matrix<T,3,1> r = (r1-r0).normalize();
  T d = dot((v0-r0),n)/dot(r, n);
  Eigen::Matrix<T,3,1> p_out = r0 + r*d;
  return p_out;
}

//template <typename T>
//inline Eigen::Matrix<T,3,1> cross(const Eigen::Matrix<T,3,1>& a, const Eigen::Matrix<T,3,1>& b){
//	Eigen::Matrix<T,3,1> r;
//	r[0] = a[1]*b[2] - a[2]*b[1];
//	r[1] = a[2]*b[0] - a[0]*b[2];
//	r[2] = a[0]*b[1] - a[1]*b[0];
//	r[3] = 1.0;
//	return r;
//}

template <typename T>
const Eigen::Matrix<T,4,1> cross(const Eigen::Matrix<T,4,1>& a,
				 const Eigen::Matrix<T,4,1>& b){
  return Eigen::Matrix<T,4,1>(a[1]*b[2] - a[2]*b[1], 
			      a[2]*b[0] - a[0]*b[2], 
			      a[0]*b[1] - a[1]*b[0], 0.0);
}




template <typename T>
inline bool ray_triangle_intersect(Eigen::Matrix<T,3,1>& pi,
				   const Eigen::Matrix<T,3,1>& r0,
				   const Eigen::Matrix<T,3,1>& r1,
				   const Eigen::Matrix<T,3,1>& v0,
				   const Eigen::Matrix<T,3,1>& v1,
				   const Eigen::Matrix<T,3,1>& v2,
				   T& dist)
{
  // Adapted from:
  // Copyright 2001, softSurfer (www.softsurfer.com)
  // using paramatric coordinates, V(s,t) = v0 + su +tv
  // where u = v1-v0
  // and   v = v2-v0
  // if s+t > 1 then we return false
  // we update p with the intersection in the plane
	
  Eigen::Matrix<T,3,1> u = v1-v0;
  Eigen::Matrix<T,3,1> v = v2-v0;
	
  Eigen::Matrix<T,3,1> n = cross(u,v);
  n = n.normalize();
  T eps = 0.00001;
  Eigen::Matrix<T,3,1> dir = (r1-r0);
  T b = dot(dir, n);
  if (fabs(b) < eps) {
    return 0;
  }
  dist = dot((v0-r0),n)/b;
  pi = r0 + dir*dist;
	
  Eigen::Matrix<T,3,1> w = pi-v0;	
	
  T duu = dot(u,u);
  T dvv = dot(v,v);
  T duv = dot(u,v);
  T dwu = dot(w,u);
  T dwv = dot(w,v);
  T denom = 1./(duv*duv - duu*dvv);
  T s0 = (duv*dwv - dvv*dwu)*denom;
  if (s0 < -eps || s0 > 1.0 + eps)		return 0;   // I is outside T
  T t0 = (duv*dwu - duu*dwv)*denom;
  if (t0 < -eps || (s0 + t0) > 1.0 + eps) return 0;	// I is outside T        
	
  return 1;										// I is in T
} 




template <typename T>
inline bool ray_triangle_intersectII(Eigen::Matrix<T,3,1>& pi,
				     const Eigen::Matrix<T,3,1>& r0,
				     const Eigen::Matrix<T,3,1>& r1,
				     const Eigen::Matrix<T,3,1>& v0,
				     const Eigen::Matrix<T,3,1>& v1,
				     const Eigen::Matrix<T,3,1>& v2,
				     T& dist)
{
  // Fast Minimum Storage RayTriangle Intersection
  //	Tomas Moller
  //	Ben Trumbore
  //http://www.cs.virginia.edu/~gfx/Courses/2003/ImageSynthesis/papers/Acceleration/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf
	
  Eigen::Matrix<T,3,1> e1 = v1-v0;
  Eigen::Matrix<T,3,1> e2 = v2-v0;
  Eigen::Matrix<T,3,1> dir = (r1-r0);
	
  Eigen::Matrix<T,3,1> p = cross(dir,e2);	
  T det = dot(p,e1);
  T eps = 0.0001;
  bool out = 0;
  if (fabs(det) > eps) {
		
    Eigen::Matrix<T,3,1> tt = r0 - v0;
    Eigen::Matrix<T,3,1> Q = cross(tt,e1);
    T u = dot(p,tt)/det;
    if (u > -eps && u < 1.0+eps) {
      T v = dot(Q,dir)/det;
			
      if (v > -eps && u+v < 1.0+eps) {
	T t = dot(Q,e2)/det;
	dist = t;
	pi = r0 + dir*t;
	out = 1;
      }		
    }		
  }
  return out;
}		


template <typename T>
inline bool point_in_bounds(const Eigen::Matrix<T,3,1>& pt,
			    const T &xmin, const T &xmax,
			    const T &ymin, const T &ymax,
			    const T &zmin, const T &zmax){
  bool out = true;
  if (pt[0] >= xmax) out = false;
  if (pt[0] <= xmin) out = false;
  if (pt[1] >= ymax) out = false;
  if (pt[1] <= ymin) out = false;
  if (pt[2] >= zmax) out = false;
  if (pt[2] <= zmin) out = false;
  return out;
}

template <typename T, typename POINT_TYPE>
  inline bool box_intersection(Eigen::Matrix<T,3,1> cen,
			       Eigen::Matrix<T,3,1> r0,
			       Eigen::Matrix<T,3,1> r1){
  //this little guy is pretty cool.  So what I'm doing is I'm calculating the plane normal to the ray that intersects
  //with the center of the box.  Then if the point intersecting with that ray and the plane is is outside the box we 
  //return false.  This way I don't have to calculate every intersection withe every side.  Bleh, that sounds terrible
  //	T eps = 0.1;
  //	T r = o.radius() + eps;
  T r = 0.0;
  T xmax = cen[0] + r, xmin = cen[0] - r;
  T ymax = cen[1] + r, ymin = cen[1] - r;
  T zmax = cen[2] + r, zmin = cen[2] - r;
  bool out = true;
	
  Eigen::Matrix<T,3,1> d1 = ray_point_intersect(r0, r1, cen);
  out = point_in_bounds(d1, xmin, xmax, ymin, ymax, zmin, zmax);
  return out;
};

template <typename T>
inline T determinant(const Eigen::Matrix<T,3,1>& A,
		     const Eigen::Matrix<T,3,1>& B, 
		     const Eigen::Matrix<T,3,1>& C)
{	
  /*if the volume of the determinant is negative then 
    the vectors are clockwise, else anti-clockwise*/
  /*  a b c		A
  // d e f ->	B
  // g h i		C
	 
  detA	= aei + bfg + cdh - afh - bdi - ceg
  ////	= Ax*By*Cz + Ay*Bz*Cx + Az*Bx*Cy
  ////	- Ax*Bz*Cy - Ay*Bx*Cz - Az*By*Cx
  */
	
  T
    Ax,Ay,Az,	
    Bx,By,Bz,	
    Cx,Cy,Cz;	
	
  Ax = A[0];	Ay = A[1]; Az = A[2];
  Bx = B[0];	By = B[1]; Bz = B[2];
  Cx = C[0];	Cy = C[1]; Cz = C[2];
	
  T out 	= Ax*By*Cz + Ay*Bz*Cx + Az*Bx*Cy
    - Ax*Bz*Cy - Ay*Bx*Cz - Az*By*Cx;
	
  return out;
};


template <typename T>
inline T angle_from_vectors(const Eigen::Matrix<T,3,1>& angA,
			    const Eigen::Matrix<T,3,1> angB){
	
  T AB	= dot(angA, angB);
	
  T ABab, magA, magB;
  magA = angA.mag();
  magB = angB.mag();
  ABab = AB/magA/magB;
  T out = acos(ABab);
  return out;
};

template <int N, typename T>
  inline  bool project_on_line(const Eigen::Matrix<T,N,1>& x0, 
			       const Eigen::Matrix<T,N,1>& x1, 
			       const Eigen::Matrix<T,N,1>& pt,
			       Eigen::Matrix<T,N,1>&		 pr,
			       T					 eps){
  Eigen::Matrix<T,N,1> Q = pt - x0;
  Eigen::Matrix<T,N,1> dx  = x1 - x0;
  T mdx = dx.mag();
  Eigen::Matrix<T,N,1> ndx = dx/mdx;
  T t = dot(Q,ndx)/mdx;	
  pr = x0 + t*dx;
  if (t > -eps && t <= 1+eps) {
    return true;
  }
  else {
    return false;
  }
}

template <typename T>
inline T distance_from_line(const Eigen::Matrix<T,3,1>& la, 
			    const Eigen::Matrix<T,3,1>& lb, 
			    const Eigen::Matrix<T,3,1>& pt){
  Eigen::Matrix<T,3,1> dx1 = pt - la;
  Eigen::Matrix<T,3,1> dx2 = pt - lb;
  Eigen::Matrix<T,3,1> dl  = lb - la;
	
  T d = (cross(dx1,dx2).mag())/dl.mag();
  return d;
}

template <typename T>
inline T distance_from_line(Eigen::Matrix<T,2,1>& x1, 
			    Eigen::Matrix<T,2,1>& x2, 
			    Eigen::Matrix<T,2,1>& pt){
	
  Eigen::Matrix<T,2,1> dl  = x2 - x1;
	
  T d = ((x2[0]-x1[0])*(x1[1]-pt[1]) - (x1[0]-pt[0])*(x2[1]-x1[1]))/dl.mag();
  return d;
}

template <typename T>
inline T distance_from_plane(const Eigen::Matrix<T,3,1>& v0,
			     const Eigen::Matrix<T,3,1>& v1,
			     const Eigen::Matrix<T,3,1>& v2,
			     const Eigen::Matrix<T,3,1>& r0)
{	
  Eigen::Matrix<T,3,1> u = v1-v0;
  Eigen::Matrix<T,3,1> v = v2-v0;
  Eigen::Matrix<T,3,1> n = cross(u,v);
  T num = dot(n,r0-v0);
  T d = num/sqrt(dot(n,n));
	
  return d;
}


template <typename T>
inline vector<Eigen::Matrix<T,3,1> > orthogonal_project(const Eigen::Matrix<T,3,1>& norm,
						const vector<Eigen::Matrix<T,3,1> >& verts){
	
  T
    Nxx,Nxy,Nxz,
    Nyy,Nyz,
    Nzz;
	
  Nxx = norm[0]*norm[0] - 1;
  Nxy = norm[0]*norm[1];
  Nxz = norm[0]*norm[2];
  Nyy = norm[1]*norm[1] - 1;
  Nyz = norm[1]*norm[2];
  Nzz = norm[2]*norm[2] - 1;
	
  vector<Eigen::Matrix<T,3,1> > out;
  typename vector<Eigen::Matrix<T,3,1> >::iterator itb = verts.begin();
  for (itb; itb != verts.end(); itb++) {
    Eigen::Matrix<T,3,1> cur = *itb;
    Eigen::Matrix<T,3,1> nv;
    nv[0] = Nxx*cur[0] + Nxy*cur[1] + Nxz*cur[2];
    nv[1] = Nxy*cur[0] + Nyy*cur[1] + Nyz*cur[2];
    nv[2] = Nxz*cur[0] + Nyz*cur[1] + Nzz*cur[2];
    out.push_back(nv);
  }
	
  return out;
}

template <typename T>
inline Eigen::Matrix<T,3,1> reflect(const Eigen::Matrix<T,3,1>& norm,
			    const Eigen::Matrix<T,3,1>& x){
	
  T
    Nxx,Nxy,Nxz,
    Nyy,Nyz,
    Nzz;
  Eigen::Matrix<T,3,1> rx;
	
  Nxx = 1 - 2*norm[0]*norm[0];
  Nxy =     2*norm[0]*norm[1];
  Nxz =     2*norm[0]*norm[2];
  Nyy = 1 - 2*norm[1]*norm[1];
  Nyz =     2*norm[1]*norm[2];
  Nzz = 1 - 2*norm[2]*norm[2];	
	
  rx[0] = Nxx*x[0] + Nxy*x[1] + Nxz*x[2];
  rx[1] = Nxy*x[0] + Nyy*x[1] + Nyz*x[2];
  rx[2] = Nxz*x[0] + Nyz*x[1] + Nzz*x[2];
	
  return rx;
};


template <typename T>
inline Eigen::Matrix<T,3,1> orthogonal_project(const Eigen::Matrix<T,3,1>& N,
				       const Eigen::Matrix<T,3,1>& A){
  //N has to be normalized
  T dist = dot(N,A);
  Eigen::Matrix<T,3,1> out = A - dist*N;
  return out;
};

//type distance_from_line(Eigen::Matrix<T,3,1> la, Eigen::Matrix<T,3,1> lb, Eigen::Matrix<T,3,1> pt){
//	Eigen::Matrix<T,3,1> out;
//	T m = lb - la;		
//	T p = pt - la
//	
//	return d;
//}


template <typename T>
inline T angle_from_plane(const Eigen::Matrix<T,3,1>& norm,
			  const Eigen::Matrix<T,3,1>& vertA, const Eigen::Matrix<T,3,1>& vertB){
  T
    Nxx,Nxy,Nxz,
    Nyy,Nyz,
    Nzz;
  Eigen::Matrix<T,3,1> A,B,AC,BC;
	
  Nxx = norm[0]*norm[0] - 1;
  Nxy = norm[0]*norm[1];
  Nxz = norm[0]*norm[2];
  Nyy = norm[1]*norm[1] - 1;
  Nyz = norm[1]*norm[2];
  Nzz = norm[2]*norm[2] - 1;
	
  AC = vertA;
  BC = vertB;
	
  A[0] = Nxx*AC[0] + Nxy*AC[1] + Nxz*AC[2];
  A[1] = Nxy*AC[0] + Nyy*AC[1] + Nyz*AC[2];
  A[2] = Nxz*AC[0] + Nyz*AC[1] + Nzz*AC[2];
	
  B[0] = Nxx*BC[0] + Nxy*BC[1] + Nxz*BC[2];
  B[1] = Nxy*BC[0] + Nyy*BC[1] + Nyz*BC[2];
  B[2] = Nxz*BC[0] + Nyz*BC[1] + Nzz*BC[2];
	
  return angle_from_vectors(A, B);
};

template <typename T>
inline Eigen::Matrix<T,3,1> calculate_normal(vector<Eigen::Matrix<T,3,1> > vt_list){
  //using newell's method
  Eigen::Matrix<T,3,1> tNormal;
  size_t size = vt_list.size();
	
  for (int i = 0; i < vt_list.size(); i++) {	
    Eigen::Matrix<T,3,1>& curr = vt_list[i];
    Eigen::Matrix<T,3,1>& next = vt_list[(i + 1)%size];
    tNormal[0] += (curr[1] - next[1])*(curr[2] + next[2]);
    tNormal[1] += (curr[2] - next[2])*(curr[0] + next[0]);
    tNormal[2] += (curr[0] - next[0])*(curr[1] + next[1]);
  }
  tNormal.normalize();
  return tNormal;
}

template <typename T>
inline Eigen::Matrix<T,3,1> calculate_average(vector<Eigen::Matrix<T,3,1> > vt_list){
  Eigen::Matrix<T,3,1> tCenter;
  tCenter.zero();
  T size = (T)vt_list.size();
  typename vector<Eigen::Matrix<T,3,1> >::iterator itb = vt_list.begin();
  typename vector<Eigen::Matrix<T,3,1> >::iterator ite = vt_list.end();
  tCenter.zero();
  Eigen::Matrix<T,3,1> coord;
  T inv = 1/size;
  while (itb != ite) {
    coord = (*itb);
    tCenter += coord*inv;
    ++itb;
  }
  return tCenter;
}

template <typename T>
inline void radial_test(){
  Eigen::Matrix<T,3,1> A;
  Eigen::Matrix<T,3,1> B;
	
  T imax = 16;
  for (int i = 0; i < int(imax); i++) {
    A.set( 0,1,0);		
    B.set( sin(2*3.14*T(i)/imax), cos(2*3.14*T(i)/imax),0);
		
    T magA = A.mag();
    T magB = B.mag();
    Eigen::Matrix<T,3,1> cAB = cross(A, B);
    T magcAB = cAB.mag();
		
    T dotAB = dot(A, B);
		
    T ndotAB = dotAB/magA/magB;
    T nmagcAB = magcAB/magA/magB;
		
    T theta1 = acos(ndotAB);
    T theta2 = asin(nmagcAB);
    cout << i << ": " << 2*3.14*T(i)/imax << endl;
    cout << "   " << ndotAB << ", " << nmagcAB << endl;			
    cout << "   " << theta1 << ", " << theta2 << endl;
  }
}

inline float Q_rsqrt( float number )
{
  long i;
  float x2, y;
  const float threehalfs = 1.5F;
	
  x2 = number * 0.5F;
  y  = number;
  i  = * ( long * ) &y;                       // evil floating point bit level hacking [sic]
  i  = 0x5f3759df - ( i >> 1 );               // what the fuck? [sic]
  y  = * ( float * ) &i;
  y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration
  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed
  return y;
}


template <typename T>
inline Eigen::Matrix<T,3,1> fnormalize(Eigen::Matrix<T,3,1> vecin){
  T mag = vecin[0]*vecin[0] + vecin[1]*vecin[1] + vecin[2]*vecin[2];
  T imag = Q_rsqrt(mag);
  return vecin*imag;
}


#endif
