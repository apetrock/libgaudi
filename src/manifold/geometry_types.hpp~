/*
 *  geometry_types.hpp
 *  Manifold
 *
 *  Created by John Delaney on 8/10/11.
 *  Copyright 2011 __MyCompanyName__. All rights reserved.
 *
 */

#ifndef __GEOMETRY_TYPES__
#define __GEOMETRY_TYPES__

#include <iostream>
#include <Eigen/Dense>
#include <Eigen/Eigenvalues>


template <typename T, typename CTYPE>
struct swept_triangle{
  static const int size = 3;
  CTYPE p[3];
  CTYPE v[3];
  T dt;
  swept_triangle(){
  };

  swept_triangle( CTYPE p0,  CTYPE p1,  CTYPE p2,
	    CTYPE v0,  CTYPE v1,  CTYPE v2, T Dt){
    p[0] = p0; p[1] = p1; p[2] = p2;
    v[0] = v0; v[1] = v1; v[2] = v2;
  };
  
  CTYPE & operator[](int i)       {return p[i];}
  CTYPE   operator[](int i) const {return p[i];}

  CTYPE normal(){
    return cross(p[1]-p[0],p[2]-p[0]).normalize();
  }
  
  CTYPE center(){
    return 0.33333*(p[0]+p[1]+p[2]);
  }

  void getExtents(CTYPE & min, CTYPE & max){
    min = this->center();
    max = min;
    for(int i = 0; i < 3; i++){
      for(int j = 0; j < 3; j++){
	min[i] = p[j][i] < min[i] ? p[j][i] : min[i];
	max[i] = p[j][i] > max[i] ? p[j][i] : max[i];
      }
      for(int j = 0; j < 3; j++){
	min[i] = p[j][i] + dt*v[j][i] < min[i] ? p[j][i] + dt*v[j][i] : min[i];
	max[i] = p[j][i] + dt*v[j][i] > max[i] ? p[j][i] + dt*v[j][i] : max[i];
      }
    }
  }

  void draw(){
    glBegin(GL_POLYGON);
    CTYPE norm = this->normal();
    glNormal3f(norm[0], norm[1], norm[2]);
    glVertex3d(p[0][0],p[0][1],p[0][2]);
    glVertex3d(p[1][0],p[1][1],p[1][2]);
    glVertex3d(p[2][0],p[2][1],p[2][2]);
    glEnd();
  }
};


template <typename T, typename CTYPE>
struct triangle{
  static const int size = 3;
  CTYPE p[3];
  triangle(){
  };

  triangle( CTYPE p0,  CTYPE p1,  CTYPE p2){
    p[0] = p0; p[1] = p1;p[2] = p2;
  };
  
  CTYPE & operator[](int i)       {return p[i];}
  CTYPE   operator[](int i) const {return p[i];}

  CTYPE normal(){
    return cross(p[1]-p[0],p[2]-p[0]).normalize();
  }
  
  CTYPE center(){
    return 0.33333*(p[0]+p[1]+p[2]);
  }

  void getExtents(CTYPE & min, CTYPE & max){
    min = this->center();
    max = min;
    for(int i = 0; i < 3; i++){
      for(int j = 0; j < 3; j++){
	min[i] = p[j][i] < min[i] ? p[j][i] : min[i];
	max[i] = p[j][i] > max[i] ? p[j][i] : max[i];
      }
    }
  }

  void draw(){
    glBegin(GL_POLYGON);
    CTYPE norm = this->normal();
    glNormal3f(norm[0], norm[1], norm[2]);
    glVertex3d(p[0][0],p[0][1],p[0][2]);
    glVertex3d(p[1][0],p[1][1],p[1][2]);
    glVertex3d(p[2][0],p[2][1],p[2][2]);
    glEnd();
  }
};

template <typename T, typename CTYPE>
struct swept_point{
public:
  CTYPE p;
  CTYPE v;
  T dt;
  swept_point( CTYPE p0,  CTYPE vi){
    p = p0; v = vi;
  };

  CTYPE center(){
    return 0.5*(p + v);
  }

  void getExtents(CTYPE & min, CTYPE & max){
    min = this->center();
    max = min;
    for(int i = 0; i < 3; i++){
      min[i] = p[i] < min[i] ? p[i] : min[i];
      max[i] = p[i] > max[i] ? p[i] : max[i];      
      min[i] = p[i] + dt*v[i] < min[i] ? p[i] + dt*v[i] : min[i];
      max[i] = p[i] + dt*v[i] > max[i] ? p[i] + dt*v[i] : max[i];
    }
  }

  void draw(){
    glBegin(GL_LINE);
    glVertex3d(p[0],p[1],p[2]);
    glVertex3d(p[0] + dt*v[0],
	       p[1] + dt*v[1],
	       p[2] + dt*v[2]);
    glEnd();
  }
};

template <typename T, typename CTYPE>
struct line{
  CTYPE p[2];
  line( CTYPE p0,  CTYPE p1){
    p[0] = p0; p[1] = p1;
  };

  CTYPE & operator[](int i)       {return p[i];}
  CTYPE   operator[](int i) const {return p[i];}
  
  CTYPE center(){
    return 0.5*(p[0],p[1]);
  }

  void draw(){
    glBegin(GL_LINE);
    glVertex3d(p[0][0],p[0][1],p[0][2]);
    glVertex3d(p[1][0],p[1][1],p[1][2]);
    glEnd();
  }
};


template <typename T, typename CTYPE>
struct box{
  CTYPE center;
  CTYPE half;

  box(){
  };

  box( CTYPE cen,  CTYPE h){
    center = cen;
    half = h;
  };

  void drawCenter(T size){
    glPointSize(size);
    glBegin(GL_POINTS);
    glVertex3d(center[0],center[1],center[2]);
    glEnd();
  }

  void draw(){
    CTYPE p = this->center;
    CTYPE h = this->half;
    glBegin(GL_LINES);
    glVertex3d(p[0] - h[0],p[1] - h[1],p[2]-h[2]);
    glVertex3d(p[0] + h[0],p[1] - h[1],p[2]-h[2]);

    glVertex3d(p[0] + h[0],p[1] - h[1],p[2]-h[2]);
    glVertex3d(p[0] + h[0],p[1] + h[1],p[2]-h[2]);

    glVertex3d(p[0] + h[0],p[1] + h[1],p[2]-h[2]);
    glVertex3d(p[0] - h[0],p[1] + h[1],p[2]-h[2]);

    glVertex3d(p[0] - h[0],p[1] + h[1],p[2]-h[2]);
    glVertex3d(p[0] - h[0],p[1] - h[1],p[2]-h[2]);


    glVertex3d(p[0] - h[0],p[1] - h[1],p[2]+h[2]);
    glVertex3d(p[0] + h[0],p[1] - h[1],p[2]+h[2]);

    glVertex3d(p[0] + h[0],p[1] - h[1],p[2]+h[2]);
    glVertex3d(p[0] + h[0],p[1] + h[1],p[2]+h[2]);

    glVertex3d(p[0] + h[0],p[1] + h[1],p[2]+h[2]);
    glVertex3d(p[0] - h[0],p[1] + h[1],p[2]+h[2]);

    glVertex3d(p[0] - h[0],p[1] + h[1],p[2]+h[2]);
    glVertex3d(p[0] - h[0],p[1] - h[1],p[2]+h[2]);


    glVertex3d(p[0] - h[0],p[1] - h[1],p[2] - h[2]);
    glVertex3d(p[0] - h[0],p[1] - h[1],p[2] + h[2]);

    glVertex3d(p[0] + h[0],p[1] - h[1],p[2] - h[2]);
    glVertex3d(p[0] + h[0],p[1] - h[1],p[2] + h[2]);

    glVertex3d(p[0] + h[0],p[1] + h[1],p[2] - h[2]);
    glVertex3d(p[0] + h[0],p[1] + h[1],p[2] + h[2]);

    glVertex3d(p[0] - h[0],p[1] + h[1],p[2] - h[2]);
    glVertex3d(p[0] - h[0],p[1] + h[1],p[2] + h[2]);

    glVertex3d(p[0] - h[0],p[1] - h[1],p[2] - h[2]);
    glVertex3d(p[0] - h[0],p[1] - h[1],p[2] + h[2]);

    glEnd();
  } 
};

//template <typename T, typename CTYPE, typename PRIMITIVE>
//bool boxIntersect(PRIMITIVE& prim, box<T,CTYPE> & b);

//template<typename T, typename vectype>
//class ray{};

template <typename T>
class euclidean_space{
public:
  typedef T							double_type;
  typedef T							real;
  //always use homogeneous coordinates, provides decent error checking
  typedef Eigen::Matrix< T, 4, 1 > 			coordinate_type;
  
  
  typedef line<T,coordinate_type>		                line_type;	
  typedef triangle<T,coordinate_type>		        triangle_type;
  typedef swept_point<T,coordinate_type>		        swept_point_type;
  typedef swept_triangle<T,coordinate_type>		        swept_triangle_type;	
  typedef box<T,coordinate_type>		                box_type;	
  typedef Eigen::Matrix< T, 3, 3>                          mat3; 
  typedef Eigen::Matrix< T, 4, 4>                          mat4; 
  typedef unsigned short	ushort;
  typedef unsigned int		uint;
  typedef unsigned long		ulong;
	
  typedef double		double_t;
  typedef float			float_t;

  typedef Eigen::Quaternion<T>  quat;	
  typedef Eigen::Matrix<T,2,1>	vec2;
  typedef Eigen::Matrix<T,3,1>	vec3;
  typedef Eigen::Matrix<T,4,1>	vec4;
	
  typedef Eigen::Matrix<uint, 2,1>	uint2;
  typedef Eigen::Matrix<uint, 2,1>	uint4;
	
  typedef Eigen::Matrix<T,2,1>	int2;
  typedef Eigen::Matrix<T,4,1>	int3;
  typedef Eigen::Matrix<T,4,1>	int4;
};

typedef  euclidean_space<double> space3;

template <typename T>
T norm(Eigen::Matrix<T, 4,1> a){return a.mag();};
template <typename T>
T norm2(Eigen::Matrix<T,4,1> a){
  return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];
};

template <typename T>
inline Eigen::Matrix<T,4,1> cross(const Eigen::Matrix<T,4,1>& vecA, 
				  const Eigen::Matrix<T,4,1>& vecB){
  Eigen::Matrix<T,4,1> out;
  out[0] = vecA[1]*vecB[2] - vecA[2]*vecB[1];
  out[1] = vecA[2]*vecB[0] - vecA[0]*vecB[2];
  out[2] = vecA[0]*vecB[1] - vecA[1]*vecB[0];
  out[3] = 1.0;
  return out;
}



#endif
