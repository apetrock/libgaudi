/*
 *  manifold_singleton.h
 *  Phase Vocoder
 *
 *  Created by John Delaney on 12/29/10.
 *  Copyright 2010 __MyCompanyName__. All rights reserved.
 *
 */

#include <iostream>
#include "EIGEN.h"
#include "m2Includes.h"

#ifndef __MANIFOLD_DEBUGGER__
#define __MANIFOLD_DEBUGGER__

namespace m2 {

  class Debugger{
    typedef al::Vec<3,double> coordinate_type;

    inline void renderString(float x, 
			     float y, 
			     float z,  
			     float s,
			     char *string) {  
      char *c;
      glPointSize(3.);
      glBegin(GL_POINTS);
      glVertex3f(x, y, z);
      glEnd();
	
      glPushMatrix();
      //	glLoadIdentity();
	
      glTranslatef(x, y, z);
      glScalef(s, s, s);
	
      glRotatef(90, 1, 0, 0);
      for (c=string; *c != '\0'; c++) {
	glutStrokeCharacter(GLUT_STROKE_ROMAN, *c);
      }
      glPopMatrix();
    };

  public:

    std::vector<coordinate_type> DebugBoxes; //center and half points

    std::vector<string>          DebugLabels;
    std::vector<coordinate_type> DebugLabelPoints;
    std::vector<int>              DebugIds;
    std::vector<coordinate_type> DebugIdPoints;
    std::vector<coordinate_type> DebugPoints;
    std::vector<coordinate_type> DebugPoints0;

    std::vector<coordinate_type> DebugMagPoints;
    std::vector<double> DebugMags;

    std::vector<coordinate_type> DebugLines;
    std::vector<coordinate_type> DebugLines0;
    std::vector<coordinate_type> DebugLines1;
    std::vector<coordinate_type> DebugTriangles;
    std::vector<coordinate_type> DebugTriangles0;
    std::vector<coordinate_type> CachedTriangles;
    int labelId;

    void add_label(float x, float y, float z, string label);
    void draw_labels();

    void add_id(float x, float y, float z);
    void draw_ids();
    void draw_points();
    void draw_points_0();
    void draw_boxes();
    void draw_mag_points();
    void draw_lines();
    void draw_lines_0();
    void draw_lines_1();
    void draw_triangles();
    void draw_triangles_0();
    void draw_cached_triangles();
    void draw_cached_triangle_lines();
    static Debugger& get_instance();
    bool& initialized(){       return instance_flag;}
    bool  initialized() const {return instance_flag;}
		
  private:
    Debugger(){
      global_instance = this;
    }
		
    Debugger(const Debugger&);
    Debugger & operator=(const Debugger &);
		
    static Debugger* global_instance;
    static bool instance_flag;
  };
}//end singleton

#endif
