/*
 *  buffer.h
 *  Phase Vocoder
 *
 *  Created by John Delaney on 4/14/10.
 *  Copyright 2010 __MyCompanyName__. All rights reserved.
 *
 */


#ifndef __BUFFER__
#define __BUFFER__
//#include <OpenGL/gl.h>				// Header File For The OpenGL32 Library
//#include <OpenGL/glu.h>			// Header File For The GLu32 Library
//#include <GLUT/glut.h>			// Header File For The GLUT Library
#include <iostream>
#include <math.h>

using namespace std;

template <class T>
class buffer_base{
public:
	buffer_base(size_t buffsize_in){
		//size_ = 0;
		capacity_ = buffsize_in;
	}
	
	virtual size_t&  capacity(){return this->capacity_;}
	virtual size_t  capacity() const {return this->capacity_;}
	
protected:
	size_t  capacity_;
	//size_t  size_;
};

template <class T>
class buffer : public buffer_base<T>{	
protected:
	T*	bufferHead;
	T*	recordCursor;
	T*	playbackCursor;
	
public:
	buffer(size_t buffsize_in)
	: buffer_base<T>(buffsize_in)
	{
		bufferHead = new T[buffsize_in];
		memset(bufferHead, 0, sizeof(T)*buffsize_in);
		recordCursor = bufferHead;
		playbackCursor = bufferHead;
		
//		for (size_t i = 0; i<this->capacity_; i++) {
//			bufferHead[i] = sin(3.14*440*i);
//			cout << *playbackCursor++ << " ";
//		}
	}
	
	~buffer(){
		delete bufferHead;
	}
	
	//	virtual void setPlayBackCursor(int numsamples);
	virtual T* getRecordCursor(){return recordCursor;};
	virtual T* getPlayCursor(){return playbackCursor;};
	virtual T* getbufferHead(){return bufferHead;};
	virtual void advancePlayCursor(int newCursorLoc){playbackCursor += newCursorLoc;};
	virtual void advanceRecordCursor(int cursorLoc){recordCursor += cursorLoc;};	
	
	//virtual size_t&  size(){ return (recordCursor - bufferHead);};
	virtual size_t  size()   const { return this->capacity_;};
	virtual size_t  length() const {return this->size();}
	
	virtual void setPlayCursor(int newCursorLoc){playbackCursor = bufferHead + newCursorLoc;};
	virtual void setRecordCursor(int cursorLoc){recordCursor = bufferHead + cursorLoc;};	
	virtual void resetPlayCursor(){playbackCursor = bufferHead;};
	virtual void resetRecordCursor(){recordCursor = bufferHead;};
	
	T& operator[](const size_t loc_){
		return bufferHead[loc_];
	}
	
	T operator[](const size_t loc_) const{
		return bufferHead[loc_];
	}
	
	void write_buffer(const T in_){
		if (recordCursor >= (bufferHead + this->capacity_)) {
			recordCursor = bufferHead;
		}
		
		*recordCursor++ = in_;
	}
	
	T const read_buffer(){
		if (playbackCursor >= (bufferHead + this->capacity_)) {
			playbackCursor = bufferHead;
		}
		return *playbackCursor++;
	}
	
	void resetPCursor(){
		playbackCursor = bufferHead;
	}
	
	bool isFull(){
		bool out = (recordCursor >= (bufferHead + this->capacity_)) ? true : false;
		return out;
	}
	
	bool atEnd() {
		bool out = (playbackCursor >= (bufferHead + this->capacity_)) ? true : false;
		return out;
	}
	
	
	void copy_into(const buffer& in_, size_t stride_freq,  size_t stride_offset){
		//error checking!!!
		if (stride_offset + stride_freq*in_.capacity() - 1 > this->capacity_) {
			cout << stride_offset + stride_freq*in_.capacity() << endl;
			throw("buffer overunn!!!");
		}
		for (size_t i = 0; i < in_.size(); i++) {
			bufferHead[stride_freq*i + stride_offset] = in_[i];
		}
	}
	
	void copy_into(const buffer& in_){
		//error checking!!!
		if (in_.capacity() > this->capacity()) {
			throw("buffer overunn!!!");
		}
		for (size_t i = 0; i < in_.size(); i++) {
			T val = in_[i];
			bufferHead[i] = val;
		}
	}
	

	void print() const{
		
		cout << "buffer: " << endl;
		for(int i=0; i < this->capacity(); i++){
			cout << bufferHead[i] << " ";
		}
		cout << endl;
	}
	
	T get_interp(T x){
		int x0 = (int)x;
		int xint = (int)x+1;
		
		x0 = x0&(this->capacity_ - 1);
		int x1 = (x0 + 1)&(this->capacity_ - 1);
		
//		printf("%f %d %d %d\n", x, x0, x1, this->capacity_);
//		cout << "x:  " << x << endl;
//		cout << "x0: " << x0 << endl;
//		cout << "x1: " << x1 << endl;
		
		
		
		T y0 = bufferHead[x0];
		T y1 = bufferHead[x1];
		T dx = ((T)xint - x);
		T out = y0 + (y1 - y0)*dx;

		return out;
	}

	
	inline T&	operator() ( unsigned int i_in) {
		//std::cout << "getting buffer coords: " << i_in << ", " << j_in << endl;
		if (i_in > this->capacity_ ){
			std::cout <<  "buffer size: "<< this->capacity_<<" has thrown coordinates: "<< i_in << endl;
			throw ("buffer subscript out of bounds");
		}
		return bufferHead[i_in];
	}
	
	inline T	operator() ( unsigned int i_in) const {
		//std::cout << "getting buffer coords: " << i_in << ", " << j_in << endl;
		if (i_in > this->capacity_ ){
			std::cout <<  "buffer size: "<< this->capacity_<<" has thrown coordinates: "<< i_in << endl;
			throw ("buffer subscript out of bounds");
		}
		return bufferHead[i_in];
	}
	
	inline T	operator() ( T t_in) const {
		//std::cout << "getting buffer coords: " << i_in << ", " << j_in << endl;
		if (t_in > this->capacity_ ){
			std::cout <<  "buffer size: "<< this->capacity_<<" has thrown coordinates: "<< t_in << endl;
			throw ("buffer subscript out of bounds");
		}
		return get_interp(t_in);
	}
	
	buffer&	operator= (const buffer &b) {
		unsigned n1 = this->capacity();	unsigned n2 = b.capacity();
		
		if (n2 != n1){
			std::cout <<  "buffer: buffer dimension not the same" << endl;
			std::cout <<  "cannot multiply: " << n1 << "and a " << n2 << " buffer" << endl;
			throw ("inner matrix dimensions not the same");
		}	
		
		if (this != &b){
			this->copy_into(b);
		}
		return *this;
	}
	
	buffer&	operator* (const buffer &b) const{
		
		unsigned n1 = this->capacity();	unsigned n2 = b.capacity();
		
		if (n2 != n1){
			std::cout <<  "buffer: buffer dimension not the same" << endl;
			std::cout <<  "cannot multiply: " << n1 << "and a " << n2 << " buffer" << endl;
			throw ("inner matrix dimensions not the same");
		}
		buffer newBuff(this->capacity());
		//newBuff.name_ = b.name_;
		for(int i=0; i < this->capacity(); i++){
			newBuff(i) = bufferHead[i]*b.bufferHead[i];
		}
		newBuff.recordCursor   = recordCursor;
		newBuff.playbackCursor = playbackCursor;
		newBuff.capacity_  = this->capacity_;
		return newBuff;
	}
	
	buffer&	operator* (const T b) const{
		
		buffer newBuff(this->capacity());	
		for(int i=0; i < this->capacity(); i++){
			newBuff(i) = bufferHead[i]*b;
		}
		newBuff.recordCursor   = recordCursor;
		newBuff.playbackCursor = playbackCursor;
		newBuff.capacity_  = this->capacity_;
		return newBuff;
	}
	
	buffer&	operator- (const buffer &b) const{
		unsigned n1 = this->capacity();	unsigned n2 = b.capacity();
		if (n2 != n1){
			std::cout <<  "buffer: buffer dimension not the same" << endl;
			std::cout <<  "cannot subtract: " << n1 << "and a " << n2 << " buffer" << endl;
			throw ("inner matrix dimensions not the same");
		}
		
		buffer newBuff(this->capacity());	
		for(int i=0; i < this->capacity(); i++){
			newBuff(i) = bufferHead[i]-b.bufferHead[i];
		}
		newBuff.recordCursor   = recordCursor;
		newBuff.playbackCursor = playbackCursor;
		newBuff.capacity_  = this->capacity_;
		return newBuff;
	}
	
	buffer&	operator+ (const buffer &b) const{	
		unsigned n1 = this->capacity();	unsigned n2 = b.capacity();
		if (n2 != n1){
			std::cout <<  "buffer: buffer dimension not the same" << endl;
			std::cout <<  "cannot add: " << n1 << "and a " << n2 << " buffer" << endl;
			throw ("inner matrix dimensions not the same");
		}
		buffer newBuff(this->capacity());
		for(int i=0; i < this->capacity(); i++){
			newBuff(i) = bufferHead[i] + b.bufferHead[i];
		}
		newBuff.recordCursor   = recordCursor;
		newBuff.playbackCursor = playbackCursor;
		newBuff.capacity_  = this->capacity_;
		return newBuff;
	}
	
	buffer&	operator/ (const buffer &b) const{	
		unsigned n1 = this->capacity();	unsigned n2 = b.capacity();
		if (n2 != n1){
			std::cout <<  "buffer: buffer dimension not the same" << endl;
			std::cout <<  "cannot add: " << n1 << "and a " << n2 << " buffer" << endl;
			throw ("inner matrix dimensions not the same");
		}
		buffer newBuff(this->capacity());
		for(int i=0; i < this->capacity(); i++){
			newBuff(i) = bufferHead[i] / b.bufferHead[i];
		}
		newBuff.recordCursor   = recordCursor;
		newBuff.playbackCursor = playbackCursor;
		newBuff.capacity_  = this->capacity_;
		return newBuff;
	}
	
	
//	void draw(){
//		int bufferLength=this->capacity()-1;
//		T lbuffer = 0; T cbuffer = 0;
//		T ci, li = 0;
//		
//		glPushMatrix();
//		glLoadIdentity();
//		glMatrixMode(GL_PROJECTION);
//		//gluOrtho2D ( 0.0, 1.0, 0.0, 1.0 );
//		glPushMatrix();
//		glLoadIdentity ();
//
//		glTranslatef(-0.85, -0.65, 0.0);
//		glScalef(1.0, 1.0, 1.0);
//
//		glColor4f(1.0f, 1.0f, 1.0f, 0.5f);
//		glBegin(GL_QUADS);
//		glVertex3f( 0 , 0.25, 0.0f);
//		glVertex3f( 1 , 0.25, 0.0f);
//		glVertex3f( 1 , -0.25, 0.0f);
//		glVertex3f( 0 , -0.25, 0.0f);
//		glEnd();
//		
//		glColor4f(0.3f, 0.3f, 0.3f, 0.15f);
//		for (int i=0; i<bufferLength; i+=(bufferLength/50) ){
//			
//			cbuffer = fabs(bufferHead[i])/5;
//			ci = (T)i/(T)bufferLength;
//			if (cbuffer > 1.0) cbuffer = 1.0;
//			
//			glBegin(GL_QUADS);
//			glVertex3f( li , lbuffer,0.0f);
//			glVertex3f( ci , cbuffer,0.0f);
//			glVertex3f( ci ,-cbuffer,0.0f);
//			glVertex3f( li ,-lbuffer,0.0f);
//			glEnd();
//			lbuffer = cbuffer; li = ci;
//		}
//		
//		glPopMatrix();
//		glMatrixMode(GL_MODELVIEW);
//		glPopMatrix();
//	}
};

#endif
