
template <typename VEC, typename QUAT>
struct trackball_controller{
  //adapted from:
  /*
   * trackball.h
   * A virtual trackball implementation
   * Written by Gavin Bell for Silicon Graphics, November 1988.
   */
  /*
   * Quaternions always obey:  a^2 + b^2 + c^2 + d^2 = 1.0
   * If they don't add up to 1.0, dividing by their magnitued will
   * renormalize them.
   *
   * Note: See the following for more information on quaternions:
   *
   * - Shoemake, K., Animating rotation with quaternion curves, Computer
   *   Graphics 19, No 3 (Proc. SIGGRAPH'85), 245-254, 1985.
   * - Pletinckx, D., Quaternion calculus as a basic tool in computer
   *   graphics, The Visual Computer 5, 2-13, 1989.
   */

  typedef double Real;

  typedef Eigen::Matrix3f Mat3;
  typedef Eigen::Matrix4f Mat4;
  typedef Eigen::Vector2i Vec2i;
  typedef Eigen::Vector3f Vec3;
  typedef Eigen::Quaternion<float> Quat;

  trackball_controller(){
    q0 = Quat::Identity();
    q1 = Quat::Identity();
    mode = 0;
    count = 0;
    target = VEC(0.0,0.0,0.0);
    m.setIdentity();
  }
  
  void setScene(GnomonApplication * scene){
      this->scene = scene;
  };
  
  
  void setSize(Real width, Real height){
    this->WinXf = width;
    this->WinYf = height;
  };


  /*
   * Project an x,y pair onto a sphere of radius r OR a hyperbolic sheet
   * if we are away from the center of the sphere.
   */
  Real project_to_sphere(Real r, Real x, Real y)
  {
    Real d, t, z;

    d = sqrt(x*x + y*y);
    if (d < r * 0.70710678118654752440) {    /* Inside sphere */
      z = sqrt(r*r - d*d);
    } else {           /* On hyperbola */
      t = r / 1.41421356237309504880;
      z = t*t / d;
    }
    return z;
  }

  /*
   * Ok, simulate a track-ball.  Project the points onto the virtual
   * trackball, then figure out the axis of rotation, which is the cross
   * product of P1 P2 and O P1 (O is the center of the ball, 0,0,0)
   * Note:  This is a deformed trackball-- is a trackball in the center,
   * but is deformed into a hyperbolic sheet of rotation away from the
   * center.  This particular function was chosen after trying out
   * several variations.
   *
   * It is assumed that the arguments to this routine are in the range
   * (-1.0 ... 1.0)
   */
  Quat trackball(Real p1x, Real p1y, Real p2x, Real p2y)
  {
    Vec3 a; /* Axis of rotation */
    Real phi;  /* how much to rotate about axis */
    Vec3 p1, p2, d;
    Real t;
    Quat q;
    if (p1x == p2x && p1y == p2y) {
      /* Zero rotation */
      q = Quat::Identity();
      return q;
    }

    /*
     * First, figure out z-coordinates for projection of P1 and P2 to
     * deformed sphere
     */
    p1 << p1x, p1y, project_to_sphere(TRACKBALLSIZE,p1x,p1y);
    p2 << p2x, p2y, project_to_sphere(TRACKBALLSIZE,p2x,p2y);
    
    /*
     *  Now, we want the cross product of P1 and P2
     */
    a = p2.cross(p1);

    /*
     *  Figure out how much to rotate around that axis.
     */
    d = p1 - p2;
    t = d.norm() / (2.0*TRACKBALLSIZE);

    /*
     * Avoid problems with out-of-control values...
     */
    if (t > 1.0) t = 1.0;
    if (t < -1.0) t = -1.0;
    phi = 2.0 * asin(t);
    q = Quat(Eigen::AngleAxisf(phi, a));
    return q;
    //axis_to_quat(a,phi,q);
  }

  void mouseDown(const Vec2i p){
    //g.mouse().xRel() << " " << g.mouse().yRel()
    C0[0] = p[0];
    C0[1] = p[1];
    C1[0] = p[0];
    C1[1] = p[1];
    return;
    //UP = false;
  }

  void mouseUp(){
    q1 = q0;
    return;
  }

  void translateView(int x, int y){
    C0[0] +=  x;
    C0[1] +=  y;
    
    Real p0x = 2.0*C0[0]/WinXf - 1.0;
    Real p1x = 2.0*C1[0]/WinXf - 1.0;
    Real p0y = 2.0*C0[1]/WinYf - 1.0;
    Real p1y = 2.0*C1[1]/WinYf - 1.0;
    Real xc = p1x - p0x;
    Real yc = p1y - p0y;
    
    this->target[0] -= xc;
    this->target[2] += yc;
    
    C1[0] = C1[0] + x;
    C1[1] = C1[1] + y;
  }

  void rotateView(int x, int y){
    C1[0] += x;
    C1[1] += y;

    Real p0x = 1.0 - 2.0*C0[0]/WinXf;
    Real p1x = 1.0 - 2.0*C1[0]/WinXf;
    Real p0y = 2.0*C0[1]/WinYf - 1.0;
    Real p1y = 2.0*C1[1]/WinYf - 1.0;
    
    q0 = q1;
    Quat qc = this->trackball(p0x, p0y, p1x, p1y);
    
    //add_quats(qc, q0, q0);
    q0 = q0*qc;
    q0.normalize();
    std::cout << q0.x() << " " << q0.y() << std::endl;
    /*
    if (++count > RENORMCOUNT) {
        count = 0;
	q0.normalize();
	}*/
    //m.block<3,3>(0,0) = q0.toRotationMatrix();    
  }

  void mouseDrag(Vec2i rel){
    if(mode == 0)
      rotateView(rel[0],
		 rel[1]);
     
    if(mode == 1)
      translateView(rel[0],
		    rel[1]);
   
    Mat3 r = q0.toRotationMatrix();
    Vec3 pos = r*Vec3(0,0,-4);
   
    Vec3 up(0,1,0);
    
    Mat3 axis;
    axis.col(2) = (pos - target).normalized();
    axis.col(0) = up.cross(axis.col(2)).normalized();
    axis.col(1) = axis.col(2).cross(axis.col(0)).normalized();
    m.block<3,3>(0,0) = axis ;
    m.col(3) << -pos.dot(axis.col(0)), -pos.dot(axis.col(1)), -pos.dot(axis.col(2)), 1;
   
    //std::cout << m << std::endl;
    this->scene->modelview() = m;
  }

  int mode;
  Vec3 target;
  Mat4 m;   
  int   C0[2], C1[2];
  Quat q0, q1;
  Real WinXf, WinYf;
  int count;
  GnomonApplication* scene;
};
